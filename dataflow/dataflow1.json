{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "mohnish_json",
						"type": "DatasetReference"
					},
					"name": "copydata"
				},
				{
					"dataset": {
						"referenceName": "customer_service",
						"type": "DatasetReference"
					},
					"name": "customercopy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlMohnish",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "sink2",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          email as string,",
				"          age as integer,",
				"          created_at as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments',",
				"     wildcardPaths:['sample.json']) ~> copydata",
				"source(output(",
				"          CustomerKey as short,",
				"          WWICustomerID as short,",
				"          Customer as string,",
				"          BillToCustomer as string,",
				"          Category as string,",
				"          BuyingGroup as string,",
				"          PrimaryContact as string,",
				"          PostalCode as string,",
				"          ValidFrom as string,",
				"          ValidTo as string,",
				"          LineageKey as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['dimension_customer.csv']) ~> customercopy",
				"customercopy alterRow(deleteIf(CustomerKey==0)) ~> alterRow1",
				"copydata sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          email as string,",
				"          age as integer,",
				"          created_at as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     outputAssertFailedRows: true,",
				"     assertFailure_folderPath: 'errorone') ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: 'processed',",
				"     assertFailure_folderPath: 'error') ~> sink2"
			]
		}
	}
}